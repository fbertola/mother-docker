import org.gradle.api.artifacts.maven.MavenDeployment

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Settings

ext {
    project_group = 'com.github.fbertola'
    project_version = '1.0.0-Beta3'
    project_jdk = '1.8'
    project_pom = {
        name 'mother-docker'
        packaging 'jar'
        description "A simple Docker orchestrator written in Groovy."
        url 'http://github.com/fbertola/mother-docker'


        scm {
            url 'scm:git@github.com:fbertola/mother-docker.git'
            connection 'scm:git@github.com:fbertola/mother-docker.git'
            developerConnection 'scm:git@github.com:fbertola/mother-docker.git'
        }

        licenses {
            license {
                name 'The MIT License'
                url 'http://opensource.org/licenses/MIT'
                distribution 'repo'
            }
        }

        developers {
            developer {
                id 'fbertola'
                name 'Federico Bertola'
            }
        }
    }

    /** Function always returns a new manifest that can be customized */
    defaultManifest = {
        return manifest {
            def git_cmd = "git rev-parse HEAD"
            def git_proc = git_cmd.execute()

            attributes 'SCM-Revision': git_proc.text.trim()
            attributes 'Timestamp': String.valueOf(System.currentTimeMillis())
            attributes 'Build-Host': InetAddress.localHost.hostName
        }
    }

    defaultBlank = { closure ->
        try {
            closure()
        } catch (MissingPropertyException e) {
            ''
        }
    }

}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Identifiers

group = project_group
version = project_version
ext.isReleaseVersion = !version.endsWith("SNAPSHOT")

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Plugins

apply plugin: 'java'
sourceCompatibility = project_jdk
targetCompatibility = project_jdk

apply plugin: 'idea'
apply plugin: 'maven'
apply plugin: 'groovy'
apply plugin: 'signing'

repositories {
    mavenLocal()
    mavenCentral()
}

dependencies {
    compile 'org.yaml:snakeyaml:1.15'
    compile 'commons-io:commons-io:2.4'
    compile 'org.slf4j:slf4j-simple:1.7.12'
    compile 'com.spotify:docker-client:3.1.3'
    compile 'org.apache.commons:commons-lang3:3.4'
    compile 'org.codehaus.groovy:groovy-all:2.3.11'
    compile "com.github.rholder:guava-retrying:1.0.7"
    compile 'org.spockframework:spock-core:1.0-groovy-2.4'

    testCompile 'postgresql:postgresql:9.1-901-1.jdbc4'
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Artifacts

jar {
    doFirst {
        // Timestamp changes on every build. By evaluating it later, won't needlessly fail up-to-date checks.
        manifest = defaultManifest()
    }
}

task javadocJar(type: Jar, dependsOn: javadoc) {
    classifier = 'javadoc'
    from 'build/docs/javadoc'
    doFirst {
        // Timestamp changes on every build. By evaluating it later, won't needlessly fail up-to-date checks.
        manifest = defaultManifest()
    }
}

task sourcesJar(type: Jar) {
    classifier = 'sources'
    from sourceSets.main.allSource
    doFirst {
        // Timestamp changes on every build. By evaluating it later, won't needlessly fail up-to-date checks.
        manifest = defaultManifest()
    }
}

artifacts {
    archives jar
    archives javadocJar
    archives sourcesJar
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Signing

def promptForSigningCredentials() {
    // Use Java 6's console to read from the console (no good for
    // a CI environment)
    Console console = System.console()
    console.printf "\n\nWe have to sign some things in this build." +
            "\n\nPlease enter your signing details.\n\n"

    def id = console.readLine("PGP Key Id: ")
    def file = console.readLine("PGP Secret Key Ring File (absolute path): ")
    def password = console.readPassword("PGP Private Key Password: ")

    allprojects { ext."signing.keyId" = id }
    allprojects { ext."signing.secretKeyRingFile" = file }
    allprojects { ext."signing.password" = password }

    console.printf "\nThanks.\n\n"
}

if (isReleaseVersion && gradle.startParameter.taskNames.contains("uploadArchives")) {
    signing {
        promptForSigningCredentials()
        sign configurations.archives
    }
} else {
    task signArchives {
        // do nothing
    }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Publishing

def promptCredentials() {
    def console = System.console()

    if (console == null) {
        throw new RuntimeException("Console is not available. Try running from a terminal or with --no-daemon")
    }

    def username = console.readLine("\nEnter Sonatype username: ")
    username = new String(username)

    if (username.size() <= 0) {
        throw new InvalidUserDataException("Empty Sonatype username")
    }

    def password = console.readPassword("\nEnter Sonatype password: ")
    password = new String(password)

    if (password.size() <= 0) {
        throw new InvalidUserDataException("Empty Sonatype password")
    }

    return ['username': username, 'password': password]
}

uploadArchives {
    repositories {
        mavenDeployer {
            beforeDeployment { MavenDeployment deployment -> signing.signPom(deployment) }
        }

        if (gradle.startParameter.taskNames.contains("uploadArchives")) {
            mavenDeployer {
                // for snapshots https://oss.sonatype.org/content/repositories/snapshots
                // for staging/release https://oss.sonatype.org/service/local/staging/deploy/maven2
                repository(
                        url: 'https://oss.sonatype.org/service/local/staging/deploy/maven2'
                ) {
                    def credentials = promptCredentials()
                    authentication(userName: credentials['username'], password: credentials['password'])
                }

                pom.project project_pom
            }
        }
    }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Utilities

// enable Gradle Wrapper support for bootstrapping with specific version
task wrapper(type: Wrapper) {
    gradleVersion = '2.4'
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// IDE

idea {
    module {
        downloadSources = true
    }
    project {
        languageLevel = project_jdk
        vcs = 'Git'
    }
}